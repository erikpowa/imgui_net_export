using System.Runtime.InteropServices;

namespace imgui_net_export;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
public unsafe struct IDiaSymbol
{
    public VirtualFunctionTable* lpVtbl;

    public string GetName(IDiaSymbol* _this)
    {
        using BSTR name = default;
        _this->get_name(_this, &name).ThrowIfFailed();
        return name.GetString();
    }
       
    public HRESULT get_hasNestedTypes(IDiaSymbol* _this, byte* pRetVal) => _this->lpVtbl->get_hasNestedTypes(_this, pRetVal);
    public HRESULT get_offset(IDiaSymbol* _this, int* pRetVal) => _this->lpVtbl->get_offset(_this, pRetVal);
    public HRESULT get_udtKind(IDiaSymbol* _this, UdtKind* pRetVal) => _this->lpVtbl->get_udtKind(_this, pRetVal);
    public HRESULT get_access(IDiaSymbol* _this, CV_access_e* pRetVal) => _this->lpVtbl->get_access(_this, pRetVal);
    public HRESULT get_value(IDiaSymbol* _this, VARIANT* pRetVal) => _this->lpVtbl->get_value(_this, pRetVal);
    public HRESULT get_unmodifiedTypeId(IDiaSymbol* _this, int* pRetVal) => _this->lpVtbl->get_unmodifiedTypeId(_this, pRetVal);
    public HRESULT get_scoped(IDiaSymbol* _this, byte* pRetVal) => _this->lpVtbl->get_scoped(_this, pRetVal);
    public HRESULT get_function(IDiaSymbol* _this, byte* pRetVal) => _this->lpVtbl->get_function(_this, pRetVal);
    public HRESULT get_callingConvention(IDiaSymbol* _this, CallConv* pRetVal) => _this->lpVtbl->get_callingConvention(_this, pRetVal);
    public HRESULT get_count(IDiaSymbol* _this, int* pRetVal) => _this->lpVtbl->get_count(_this, pRetVal);
    public HRESULT get_length(IDiaSymbol* _this, ulong* pRetVal) => _this->lpVtbl->get_length(_this, pRetVal);
    public HRESULT get_baseType(IDiaSymbol* _this, BasicType* pRetVal) => _this->lpVtbl->get_baseType(_this, pRetVal);
    public HRESULT get_symTag(IDiaSymbol* _this, SymTagEnum* pRetVal) => _this->lpVtbl->get_symTag(_this, pRetVal);
    public HRESULT get_ordinal(IDiaSymbol* _this, int* pRetVal) => _this->lpVtbl->get_ordinal(_this, pRetVal);
    public HRESULT findChildren(IDiaSymbol* _this, SymTagEnum symTag, char* name, int compareFlags, IDiaEnumSymbols **ppResult) => _this->lpVtbl->findChildren(_this, symTag, name, compareFlags, ppResult);
    public HRESULT get_dataKind(IDiaSymbol* _this, DataKind* pRetVal) => _this->lpVtbl->get_dataKind(_this, pRetVal);
    public HRESULT get_relativeVirtualAddress(IDiaSymbol* _this, uint* pRetVal) => _this->lpVtbl->get_relativeVirtualAddress(_this, pRetVal);
    public HRESULT get_objectPointerType(IDiaSymbol* _this, IDiaSymbol **pRetVal) => _this->lpVtbl->get_objectPointerType(_this, pRetVal);
    public HRESULT get_arrayIndexType(IDiaSymbol* _this, IDiaSymbol **pRetVal) => _this->lpVtbl->get_arrayIndexType(_this, pRetVal);
    public HRESULT get_type(IDiaSymbol* _this, IDiaSymbol **pRetVal) => _this->lpVtbl->get_type(_this, pRetVal);
    public HRESULT get_lexicalParent(IDiaSymbol* _this, IDiaSymbol **pRetVal) => _this->lpVtbl->get_lexicalParent(_this, pRetVal);
    public HRESULT get_classParent(IDiaSymbol* _this, IDiaSymbol **pRetVal) => _this->lpVtbl->get_classParent(_this, pRetVal);
    public HRESULT get_symIndexId(IDiaSymbol* _this, int* pRetVal) => _this->lpVtbl->get_symIndexId(_this, pRetVal);
    public HRESULT get_undecoratedName(IDiaSymbol* _this, BSTR* pRetVal) => _this->lpVtbl->get_undecoratedName(_this, pRetVal);
    public HRESULT get_name(IDiaSymbol* _this, BSTR* pRetVal) => _this->lpVtbl->get_name(_this, pRetVal);
    public uint Release(IDiaSymbol* _this) => _this->lpVtbl->Release(_this);


    [StructLayout(LayoutKind.Sequential, Pack = 8)]
    public struct VirtualFunctionTable
    {
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, Guid*, void**, int> QueryInterface;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, uint> AddRef;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, uint> Release;

        public delegate* unmanaged[Stdcall]<IDiaSymbol*, int*, HRESULT> get_symIndexId;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, SymTagEnum*, HRESULT> get_symTag;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, BSTR*, HRESULT> get_name;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, IDiaSymbol **, HRESULT> get_lexicalParent;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, IDiaSymbol **, HRESULT> get_classParent;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, IDiaSymbol **, HRESULT> get_type;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, DataKind*, HRESULT> get_dataKind;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, ulong*, HRESULT> get_locationType;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_addressSection;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_addressOffset;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, uint*, HRESULT> get_relativeVirtualAddress;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_virtualAddress;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_registerId;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, int*, HRESULT> get_offset;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, ulong*, HRESULT> get_length;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_slot;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_volatileType;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_constType;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_unalignedType;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, CV_access_e*, HRESULT> get_access;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_libraryName;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_platform;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_language;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_editAndContinueEnabled;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_frontEndMajor;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_frontEndMinor;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_frontEndBuild;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_backEndMajor;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_backEndMinor;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_backEndBuild;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_sourceFileName;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_unused;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_thunkOrdinal;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_thisAdjust;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_virtualBaseOffset;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_virtual;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_intro;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_pure;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, CallConv*, HRESULT> get_callingConvention;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, VARIANT*, HRESULT> get_value;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, BasicType*, HRESULT> get_baseType;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_token;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_timeStamp;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_guid;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_symbolsFileName;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_reference;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, int*, HRESULT> get_count;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_bitPosition;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, IDiaSymbol **, HRESULT> get_arrayIndexType;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_packed;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_constructor;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_overloadedOperator;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_nested;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, byte*, HRESULT> get_hasNestedTypes;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_hasAssignmentOperator;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_hasCastOperator;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, byte*, HRESULT> get_scoped;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_virtualBaseClass;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_indirectVirtualBaseClass;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_virtualBasePointerOffset;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_virtualTableShape;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_lexicalParentId;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_classParentId;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_typeId;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_arrayIndexTypeId;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_virtualTableShapeId;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_code;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, byte*, HRESULT> get_function;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_managed;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_msil;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_virtualBaseDispIndex;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, BSTR*, HRESULT> get_undecoratedName;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_age;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_signature;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_compilerGenerated;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_addressTaken;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_rank;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_lowerBound;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_upperBound;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_lowerBoundId;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_upperBoundId;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_dataBytes;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, SymTagEnum, char*, int, IDiaEnumSymbols**,  HRESULT> findChildren;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> findChildrenEx;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> findChildrenExByAddr;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> findChildrenExByVA;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> findChildrenExByRVA;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_targetSection;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_targetOffset;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_targetRelativeVirtualAddress;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_targetVirtualAddress;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_machineType;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_oemId;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_oemSymbolId;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_types;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_typeIds;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, IDiaSymbol **, HRESULT> get_objectPointerType;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, UdtKind*, HRESULT> get_udtKind;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_undecoratedNameEx;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_noReturn;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_customCallingConvention;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_noInline;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_optimizedCodeDebugInfo;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_notReached;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_interruptReturn;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_farReturn;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isStatic;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_hasDebugInfo;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isLTCG;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isDataAligned;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_hasSecurityChecks;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_compilerName;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_hasAlloca;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_hasSetJump;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_hasLongJump;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_hasInlAsm;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_hasEH;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_hasSEH;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_hasEHa;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isNaked;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isAggregated;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isSplitted;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_container;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_inlSpec;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_noStackOrdering;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_virtualBaseTableType;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_hasManagedCode;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isHotpatchable;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isCVTCIL;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isMSILNetmodule;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isCTypes;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isStripped;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_frontEndQFE;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_backEndQFE;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_wasInlined;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_strictGSCheck;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isCxxReturnUdt;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isConstructorVirtualBase;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_RValueReference;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_unmodifiedType;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_framePointerPresent;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isSafeBuffers;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_intrinsic;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_sealed;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_hfaFloat;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_hfaDouble;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_liveRangeStartAddressSection;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_liveRangeStartAddressOffset;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_liveRangeStartRelativeVirtualAddress;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_countLiveRanges;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_liveRangeLength;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_offsetInUdt;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_paramBasePointerRegisterId;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_localBasePointerRegisterId;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isLocationControlFlowDependent;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_stride;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_numberOfRows;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_numberOfColumns;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isMatrixRowMajor;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_numericProperties;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_modifierValues;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isReturnValue;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isOptimizedAway;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_builtInKind;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_registerType;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_baseDataSlot;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_baseDataOffset;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_textureSlot;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_samplerSlot;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_uavSlot;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_sizeInUdt;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_memorySpaceKind;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, int*, HRESULT> get_unmodifiedTypeId;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_subTypeId;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_subType;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_numberOfModifiers;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_numberOfRegisterIndices;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isHLSLData;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isPointerToDataMember;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isPointerToMemberFunction;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isSingleInheritance;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isMultipleInheritance;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isVirtualInheritance;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_restrictedType;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isPointerBasedOnSymbolValue;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_baseSymbol;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_baseSymbolId;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_objectFileName;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isAcceleratorGroupSharedLocal;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isAcceleratorPointerTagLiveRange;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isAcceleratorStubFunction;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_numberOfAcceleratorPointerTags;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isSdl;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isWinRTPointer;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isRefUdt;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isValueUdt;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isInterfaceUdt;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> findInlineFramesByAddr;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> findInlineFramesByRVA;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> findInlineFramesByVA;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> findInlineeLines;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> findInlineeLinesByAddr;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> findInlineeLinesByRVA;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> findInlineeLinesByVA;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> findSymbolsForAcceleratorPointerTag;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> findSymbolsByRVAForAcceleratorPointerTag;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_acceleratorPointerTags;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> getSrcLineOnTypeDefn;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isPGO;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_hasValidPGOCounts;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_isOptimizedForSpeed;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_PGOEntryCount;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_PGOEdgeCount;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_PGODynamicInstructionCount;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_staticSize;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_finalLiveStaticSize;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_phaseName;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_hasControlFlowCheck;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_constantExport;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_dataExport;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_privateExport;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_noNameExport;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_exportHasExplicitlyAssignedOrdinal;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_exportIsForwarder;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, int*, HRESULT> get_ordinal;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_frameSize;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_exceptionHandlerAddressSection;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_exceptionHandlerAddressOffset;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_exceptionHandlerRelativeVirtualAddress;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_exceptionHandlerVirtualAddress;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> findInputAssemblyFile;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_characteristics;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_coffGroup;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_bindID;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_bindSpace;
        public delegate* unmanaged[Stdcall]<IDiaSymbol*, HRESULT> get_bindSlot;
    }
}